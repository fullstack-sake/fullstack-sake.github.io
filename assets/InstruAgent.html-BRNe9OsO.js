import{_ as s,r as a,o as l,c as r,d as t,e,a as i,b as o}from"./app-WuGmklff.js";const p="/assets/agent-Dl8aqBX0.webp",c="/assets/agent2-BbT7Z7Ai.webp",h="/assets/result1-DHT9yYk3.webp",g={},d=o(`<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>项目地址：https://github.com/fullstack-sake/InstruAgent</p></div><div style="text-align:center;"><h2 id="instruagent" tabindex="-1"><a class="header-anchor" href="#instruagent"><span>InstruAgent</span></a></h2></div><p align="center"> _🎯 一个简单的Agent，旨在帮助电子工程师进行仪器仪表的自动测试 🎯_ </p><h2 id="🔈声明" tabindex="-1"><a class="header-anchor" href="#🔈声明"><span>🔈声明</span></a></h2><h3 id="⚠安全警告" tabindex="-1"><a class="header-anchor" href="#⚠安全警告"><span>⚠安全警告</span></a></h3><p><strong>本项目 Agent 运行时允许 AI 自由执行任意工具，存在未知风险，请保证上位机是隔离容器环境。</strong></p><p><strong>同时，Agent 输出的不正确指令流也可能对您的仪器仪表造成未知损害，请详细阅读您的仪器编程手册。</strong></p><p><strong>项目开发时间截止为 2024 年 6 月 ，技术可能已经过时，请根据您的项目需求修改项目。</strong></p><p><strong>请知悉并自行承担风险，作者不对使用本项目造成的任何损失负责！</strong></p><h3 id="📚项目相关" tabindex="-1"><a class="header-anchor" href="#📚项目相关"><span>📚项目相关</span></a></h3><blockquote><p>2024年英特尔杯大学生电子设计竞赛 全国一等奖</p><p>第十九届挑战杯“揭榜挂帅”专项赛 全国特等奖</p></blockquote><p>项目代码并非参赛完整代码，部分代码为 Agent 模块实现。</p><h2 id="⚙️项目概述" tabindex="-1"><a class="header-anchor" href="#⚙️项目概述"><span>⚙️项目概述</span></a></h2><p>本项目通过集成 LLM-Agent 系统，获取用户请求同时将工具集传入 LLM-Agent，再通过规划模块决策整个调试过程，工具利用后输出标准命令流实现现实仪器的操作以及获取测试的结果，同时在整个系统中都通过记忆模块来储存 Agent 和用户之间的所有交互。</p><h3 id="💿核心组件" tabindex="-1"><a class="header-anchor" href="#💿核心组件"><span>💿核心组件</span></a></h3><ul><li><p><strong>用户请求</strong>：通过语音或文本方式输入自然语言需求。</p></li><li><p><strong>Agent <strong>：基于大语言模型（LLM）进行解析和处理。</strong>（支持兼容 类OpenAI 的 RESTful API）</strong></p></li><li><p><strong>规划模块</strong>：分解任务为子目标，使用 ReAct 提示词策略完成规划。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Thought: ...（每一步操控仪器的步骤）</span>
<span class="line">Action: ...（工具函数调用）</span>
<span class="line">Observation: ...（仪器输出的结果）</span>
<span class="line">......</span>
<span class="line">AgentFinish: ...（明确任务结束，防止无限循环）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>记忆模块</strong>：存储用户输入、Agent控制、仪器输出等上下文信息。</p></li><li><p><strong>工具模块</strong>：通过 Function Calling 调用工具 API 实现仪器操作。</p></li></ul><p><img src="`+p+'" alt="agent1"></p><h3 id="▶️工作流程" tabindex="-1"><a class="header-anchor" href="#▶️工作流程"><span>▶️工作流程</span></a></h3><p>1.用户通过语音识别输入请求。 2.LLM-Agent 解析请求并调用工具模块生成操作指令。 3.工具模块执行指令与仪器交互，并返回结果。 4.记忆模块存储任务日志，用于优化后续任务执行。 5.系统输出仪器操作结果与分析报告。</p><p><img src="'+c+'" alt="agent2"></p><h2 id="🎁快速开始" tabindex="-1"><a class="header-anchor" href="#🎁快速开始"><span>🎁快速开始</span></a></h2><h3 id="💡环境配置" tabindex="-1"><a class="header-anchor" href="#💡环境配置"><span>💡环境配置</span></a></h3><p>1.克隆本项目：</p><pre><code>```shell\ngit clone https://github.com/fullstack-sake/InstruAgent.git\n```\n</code></pre><p>2.安装项目依赖</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.配置环境变量</p><pre><code>按照您的 LLM 的 API 配置好`.env`文件，本项目**支持兼容 类OpenAI 的 RESTful API**（你可以本地部署OneAPI或GPT next等项目来发行API，也可直接使用LLM提供商发行的API）\n\n```\nAPI_BASE=\nAPI_KEY=\nAPI_MODEL=\n```\n</code></pre><h3 id="✅示例运行" tabindex="-1"><a class="header-anchor" href="#✅示例运行"><span>✅示例运行</span></a></h3><p>4.运行主文件</p><pre><code>```shell\npython chains.py\n```\n\n💫如需测试自定义需求，请修改`chains.py`内 `input` 对应的值：\n\n```python\n......\n    response1 = total_chain.invoke({&quot;input&quot;: &quot;帮我测试一下这个运算放大器的压摆率&quot;})\n    print(str(response1))\n......\n```\n</code></pre><p>5.运行结果</p><blockquote><p>你可能会看到如下图所示的命令行输出：</p><p><img src="'+h+'" alt="result1"></p><p>直到 <code>FinishChain</code> 结束整个链</p></blockquote><h2 id="☎️联系我" tabindex="-1"><a class="header-anchor" href="#☎️联系我"><span>☎️联系我</span></a></h2>',34),u={href:"https://github.com/fullstack-sake/InstruAgent/issues",target:"_blank",rel:"noopener noreferrer"};function m(A,b){const n=a("ExternalLinkIcon");return l(),r("div",null,[d,t("p",null,[e("欢迎技术交流，如对本项目有问题或建议，请通过 "),t("a",u,[e("Issues"),i(n)]),e(" 提交。")])])}const v=s(g,[["render",m],["__file","InstruAgent.html.vue"]]),_=JSON.parse(`{"path":"/blogs/jishu/InstruAgent.html","title":"使用Agent实现仪器仪表的自动测试","lang":"zh-CN","frontmatter":{"title":"使用Agent实现仪器仪表的自动测试","katex":true,"tags":["AI","NLP","Agent","LLM"],"date":"2025/01/22","categories":["技术"],"layout":"GlobalLayout","description":"TIP项目地址：https://github.com/fullstack-sake/InstruAgent InstruAgent _🎯 一个简单的Agent，旨在帮助电子工程师进行仪器仪表的自动测试 🎯_ 🔈声明 ⚠安全警告 本项目 Agent 运行时允许 AI 自由执行任意工具，存在未知风险，请保证上位机是隔离容器环境。 同时，Agent 输...","head":[["meta",{"property":"og:url","content":"https://sakee.cn/blogs/jishu/instruagent.html"}],["meta",{"property":"og:site_name","content":"sake's blog"}],["meta",{"property":"og:title","content":"使用Agent实现仪器仪表的自动测试"}],["meta",{"property":"og:description","content":"TIP项目地址：https://github.com/fullstack-sake/InstruAgent InstruAgent _🎯 一个简单的Agent，旨在帮助电子工程师进行仪器仪表的自动测试 🎯_ 🔈声明 ⚠安全警告 本项目 Agent 运行时允许 AI 自由执行任意工具，存在未知风险，请保证上位机是隔离容器环境。 同时，Agent 输..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"fullstacksake"}],["meta",{"property":"article:tag","content":"AI"}],["meta",{"property":"article:tag","content":"NLP"}],["meta",{"property":"article:tag","content":"Agent"}],["meta",{"property":"article:tag","content":"LLM"}],["meta",{"property":"article:published_time","content":"2025-01-21T16:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Agent实现仪器仪表的自动测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-21T16:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"fullstacksake\\",\\"email\\":\\"fullstacksake@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"🔈声明","slug":"🔈声明","link":"#🔈声明","children":[{"level":3,"title":"⚠安全警告","slug":"⚠安全警告","link":"#⚠安全警告","children":[]},{"level":3,"title":"📚项目相关","slug":"📚项目相关","link":"#📚项目相关","children":[]}]},{"level":2,"title":"⚙️项目概述","slug":"⚙️项目概述","link":"#⚙️项目概述","children":[{"level":3,"title":"💿核心组件","slug":"💿核心组件","link":"#💿核心组件","children":[]},{"level":3,"title":"▶️工作流程","slug":"▶️工作流程","link":"#▶️工作流程","children":[]}]},{"level":2,"title":"🎁快速开始","slug":"🎁快速开始","link":"#🎁快速开始","children":[{"level":3,"title":"💡环境配置","slug":"💡环境配置","link":"#💡环境配置","children":[]},{"level":3,"title":"✅示例运行","slug":"✅示例运行","link":"#✅示例运行","children":[]}]},{"level":2,"title":"☎️联系我","slug":"☎️联系我","link":"#☎️联系我","children":[]}],"git":{},"filePathRelative":"blogs/技术/InstruAgent.md","autoDesc":true}`);export{v as comp,_ as data};
